@page "/customapi"
@using PresenceLight.Core.PubSub;

@inject PresenceLight.Worker.Services.SettingsService SettingsService

@inject AppState appState
@inject IModalService Modal
@inject IOptionsMonitor<BaseConfig> Config
@inject ILogger<CustomApiSetup> _logger;

<div class="container text-body" style="overflow:hidden">
    <div class="row">
        <div class="container-fluid">
            <div class="row-fluid">
                <div>
                    <h1>Configure Custom API</h1>
                    <br />
                    <br />
                    <div>
                        <input type="checkbox" checked="@Config.CurrentValue.LightSettings.CustomApi.IsEnabled" @bind-value="@Config.CurrentValue.LightSettings.CustomApi.IsEnabled" /> Connect to Custom HTTP API
                    </div>
                    <br />
                    <br />
                    @if (Config.CurrentValue.LightSettings.CustomApi.IsEnabled)
                        {
                        <DataGrid TItem="CustomApiSetting" Editable="true" UseInternalEditing="true" EditMode="DataGridEditMode.Inline"
                                  Data="@Config.CurrentValue.LightSettings.CustomApi.Subscriptions">
                            <DataGridCommandColumn TItem="CustomApiSetting" />
                            <DataGridSelectColumn TItem="CustomApiSetting" Field="@nameof(CustomApiSetting.Availability)" Caption="Availability" Sortable="false" Editable="true">
                                <EditTemplate>
                                    <select class="form-control" value="@context.Item.Availability" @onchange="@(v => context.CellValue = v.Value.ToString())">
                                        @foreach (string item in PresenceLight.Core.AvailabilityState.AllStates)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    </select>
                                </EditTemplate>
                            </DataGridSelectColumn>
                            <DataGridSelectColumn TItem="CustomApiSetting" Field="@nameof(CustomApiSetting.Activity)" Caption="Activity" Sortable="false" Editable="true">
                                <EditTemplate>
                                    <select class="form-control" value="@context.Item.Activity" @onchange="@(v => context.CellValue = v.Value.ToString())">
                                        @foreach (string item in PresenceLight.Core.ActivityState.AllStates)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    </select>
                                </EditTemplate>
                            </DataGridSelectColumn>
                            <DataGridSelectColumn TItem="CustomApiSetting" Field="@nameof(CustomApiSetting.Method)" Caption="Method" Sortable="false" Editable="true">
                                <EditTemplate>
                                    <select class="form-control" value="@context.Item.Method" @onchange="@(v => context.CellValue = v.Value.ToString())">
                                        @foreach (string item in PresenceLight.Core.CustomApiHttpMethod.AllMethods)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    </select>
                                </EditTemplate>
                            </DataGridSelectColumn>
                            <DataGridColumn TItem="CustomApiSetting" Field="@nameof(CustomApiSetting.Uri)" Caption="Url" Sortable="false" Editable="true" />
                        </DataGrid>

                            <br />
                            <br />

                            <button class="btn btn-primary" @onclick="Save">Save Custom API Settings</button>

                            <br />
                            <br />
                            <div>
                                @if (settingsSaved)
                                {
                                    <span class="text-success">@message</span>
                                }
                            </div>
                            }
                    </div>
            </div>
        </div>
    </div>
</div>

@code {
    private void Save()
    {
        try
        {
            SettingsService.SaveSettings(Config.CurrentValue);
            _mediator.Publish(new InitializeNotification(Config.CurrentValue));

            message = "Settings Saved";
            settingsSaved = true;
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured Saving Custom Api Settings");
            throw;
        }
    }

    bool settingsSaved = false;
    string message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            appState.OnChange += RaiseStateHasChanged;
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error Occured loading Hue Setup");
            throw;
        }
        await Task.CompletedTask;
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}
